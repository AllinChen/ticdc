// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: MockService.proto

package mock_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DummyData struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyData) Reset()         { *m = DummyData{} }
func (m *DummyData) String() string { return proto.CompactTextString(m) }
func (*DummyData) ProtoMessage()    {}
func (*DummyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccac35a4ac9f2d64, []int{0}
}
func (m *DummyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DummyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DummyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DummyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyData.Merge(m, src)
}
func (m *DummyData) XXX_Size() int {
	return m.Size()
}
func (m *DummyData) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyData.DiscardUnknown(m)
}

var xxx_messageInfo_DummyData proto.InternalMessageInfo

func (m *DummyData) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*DummyData)(nil), "mock_service.DummyData")
}

func init() { proto.RegisterFile("MockService.proto", fileDescriptor_ccac35a4ac9f2d64) }

var fileDescriptor_ccac35a4ac9f2d64 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xf4, 0xcd, 0x4f, 0xce,
	0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc9,
	0xcd, 0x4f, 0xce, 0x8e, 0x2f, 0x86, 0x88, 0x29, 0x29, 0x72, 0x71, 0xba, 0x94, 0xe6, 0xe6, 0x56,
	0xba, 0x24, 0x96, 0x24, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0x41, 0x38, 0x46, 0x8b, 0x18, 0xb9, 0x78, 0x83, 0x33, 0x73, 0x0b, 0x72,
	0x52, 0xa1, 0x06, 0x09, 0xb9, 0x72, 0xf1, 0x07, 0x27, 0x82, 0x04, 0x42, 0xf3, 0x12, 0x8b, 0x2a,
	0x9d, 0x13, 0x73, 0x72, 0x84, 0xc4, 0xf5, 0x90, 0x8d, 0xd5, 0x83, 0x9b, 0x29, 0x85, 0x4b, 0x42,
	0x89, 0x41, 0xc8, 0x8b, 0x4b, 0x00, 0x62, 0x4c, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0xb9, 0xe6,
	0x68, 0x30, 0x1a, 0x30, 0x3a, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0xbd, 0x6b, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xa7, 0x57, 0xb6, 0xbf, 0x03, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleServiceClient interface {
	SampleUnaryCall(ctx context.Context, in *DummyData, opts ...grpc.CallOption) (*DummyData, error)
	SampleStreamCall(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SampleStreamCallClient, error)
}

type simpleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimpleServiceClient(cc *grpc.ClientConn) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) SampleUnaryCall(ctx context.Context, in *DummyData, opts ...grpc.CallOption) (*DummyData, error) {
	out := new(DummyData)
	err := c.cc.Invoke(ctx, "/mock_service.SimpleService/SampleUnaryCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleServiceClient) SampleStreamCall(ctx context.Context, opts ...grpc.CallOption) (SimpleService_SampleStreamCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleService_serviceDesc.Streams[0], "/mock_service.SimpleService/SampleStreamCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceSampleStreamCallClient{stream}
	return x, nil
}

type SimpleService_SampleStreamCallClient interface {
	Send(*DummyData) error
	Recv() (*DummyData, error)
	grpc.ClientStream
}

type simpleServiceSampleStreamCallClient struct {
	grpc.ClientStream
}

func (x *simpleServiceSampleStreamCallClient) Send(m *DummyData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceSampleStreamCallClient) Recv() (*DummyData, error) {
	m := new(DummyData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServiceServer is the server API for SimpleService service.
type SimpleServiceServer interface {
	SampleUnaryCall(context.Context, *DummyData) (*DummyData, error)
	SampleStreamCall(SimpleService_SampleStreamCallServer) error
}

// UnimplementedSimpleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (*UnimplementedSimpleServiceServer) SampleUnaryCall(ctx context.Context, req *DummyData) (*DummyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SampleUnaryCall not implemented")
}
func (*UnimplementedSimpleServiceServer) SampleStreamCall(srv SimpleService_SampleStreamCallServer) error {
	return status.Errorf(codes.Unimplemented, "method SampleStreamCall not implemented")
}

func RegisterSimpleServiceServer(s *grpc.Server, srv SimpleServiceServer) {
	s.RegisterService(&_SimpleService_serviceDesc, srv)
}

func _SimpleService_SampleUnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServiceServer).SampleUnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock_service.SimpleService/SampleUnaryCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServiceServer).SampleUnaryCall(ctx, req.(*DummyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleService_SampleStreamCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).SampleStreamCall(&simpleServiceSampleStreamCallServer{stream})
}

type SimpleService_SampleStreamCallServer interface {
	Send(*DummyData) error
	Recv() (*DummyData, error)
	grpc.ServerStream
}

type simpleServiceSampleStreamCallServer struct {
	grpc.ServerStream
}

func (x *simpleServiceSampleStreamCallServer) Send(m *DummyData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceSampleStreamCallServer) Recv() (*DummyData, error) {
	m := new(DummyData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SimpleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mock_service.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SampleUnaryCall",
			Handler:    _SimpleService_SampleUnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SampleStreamCall",
			Handler:       _SimpleService_SampleStreamCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "MockService.proto",
}

func (m *DummyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DummyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DummyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintMockService(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMockService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMockService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DummyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovMockService(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMockService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMockService(x uint64) (n int) {
	return sovMockService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DummyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DummyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DummyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMockService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMockService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMockService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMockService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMockService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMockService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMockService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMockService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMockService = fmt.Errorf("proto: unexpected end of group")
)
